/*
 * This file is generated by jOOQ.
 */
package com.jobster.server.model.tables;


import com.jobster.server.model.Indexes;
import com.jobster.server.model.Jobster;
import com.jobster.server.model.Keys;
import com.jobster.server.model.tables.records.CountriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countries extends TableImpl<CountriesRecord> {

    private static final long serialVersionUID = 685167182;

    /**
     * The reference instance of <code>jobster.countries</code>
     */
    public static final Countries COUNTRIES = new Countries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }

    /**
     * The column <code>jobster.countries.id_country</code>.
     */
    public final TableField<CountriesRecord, Integer> ID_COUNTRY = createField("id_country", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobster.countries.name_es</code>.
     */
    public final TableField<CountriesRecord, String> NAME_ES = createField("name_es", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>jobster.countries.name_en</code>.
     */
    public final TableField<CountriesRecord, String> NAME_EN = createField("name_en", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>jobster.countries.name_it</code>.
     */
    public final TableField<CountriesRecord, String> NAME_IT = createField("name_it", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>jobster.countries.name_fr</code>.
     */
    public final TableField<CountriesRecord, String> NAME_FR = createField("name_fr", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>jobster.countries.name_de</code>.
     */
    public final TableField<CountriesRecord, String> NAME_DE = createField("name_de", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * Create a <code>jobster.countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    /**
     * Create an aliased <code>jobster.countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>jobster.countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Countries(Table<O> child, ForeignKey<O, CountriesRecord> key) {
        super(child, key, COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobster.JOBSTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COUNTRIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CountriesRecord>>asList(Keys.KEY_COUNTRIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }
}
