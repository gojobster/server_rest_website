/*
 * This file is generated by jOOQ.
 */
package com.jobster.server.model.tables;


import com.jobster.server.model.Indexes;
import com.jobster.server.model.Jobster;
import com.jobster.server.model.Keys;
import com.jobster.server.model.tables.records.IdiomsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Idioms extends TableImpl<IdiomsRecord> {

    private static final long serialVersionUID = 231633531;

    /**
     * The reference instance of <code>jobster.idioms</code>
     */
    public static final Idioms IDIOMS = new Idioms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdiomsRecord> getRecordType() {
        return IdiomsRecord.class;
    }

    /**
     * The column <code>jobster.idioms.id_idiom</code>.
     */
    public final TableField<IdiomsRecord, Integer> ID_IDIOM = createField("id_idiom", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jobster.idioms.name</code>.
     */
    public final TableField<IdiomsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>jobster.idioms.level</code>.
     */
    public final TableField<IdiomsRecord, Integer> LEVEL = createField("level", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jobster.idioms.date_created</code>.
     */
    public final TableField<IdiomsRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jobster.idioms</code> table reference
     */
    public Idioms() {
        this(DSL.name("idioms"), null);
    }

    /**
     * Create an aliased <code>jobster.idioms</code> table reference
     */
    public Idioms(String alias) {
        this(DSL.name(alias), IDIOMS);
    }

    /**
     * Create an aliased <code>jobster.idioms</code> table reference
     */
    public Idioms(Name alias) {
        this(alias, IDIOMS);
    }

    private Idioms(Name alias, Table<IdiomsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Idioms(Name alias, Table<IdiomsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Idioms(Table<O> child, ForeignKey<O, IdiomsRecord> key) {
        super(child, key, IDIOMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobster.JOBSTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDIOMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IdiomsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_IDIOMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdiomsRecord> getPrimaryKey() {
        return Keys.KEY_IDIOMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdiomsRecord>> getKeys() {
        return Arrays.<UniqueKey<IdiomsRecord>>asList(Keys.KEY_IDIOMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Idioms as(String alias) {
        return new Idioms(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Idioms as(Name alias) {
        return new Idioms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Idioms rename(String name) {
        return new Idioms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Idioms rename(Name name) {
        return new Idioms(name, null);
    }
}
