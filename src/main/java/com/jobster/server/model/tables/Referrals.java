/*
 * This file is generated by jOOQ.
 */
package com.jobster.server.model.tables;


import com.jobster.server.model.Indexes;
import com.jobster.server.model.Jobster;
import com.jobster.server.model.Keys;
import com.jobster.server.model.tables.records.ReferralsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Referrals extends TableImpl<ReferralsRecord> {

    private static final long serialVersionUID = -285737958;

    /**
     * The reference instance of <code>jobster.referrals</code>
     */
    public static final Referrals REFERRALS = new Referrals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReferralsRecord> getRecordType() {
        return ReferralsRecord.class;
    }

    /**
     * The column <code>jobster.referrals.id_referral</code>.
     */
    public final TableField<ReferralsRecord, Integer> ID_REFERRAL = createField("id_referral", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jobster.referrals.id_jobster</code>.
     */
    public final TableField<ReferralsRecord, Integer> ID_JOBSTER = createField("id_jobster", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobster.referrals.id_candidate</code>.
     */
    public final TableField<ReferralsRecord, Integer> ID_CANDIDATE = createField("id_candidate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jobster.referrals.score</code>.
     */
    public final TableField<ReferralsRecord, Integer> SCORE = createField("score", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jobster.referrals.state</code>.
     */
    public final TableField<ReferralsRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jobster.referrals.code</code>.
     */
    public final TableField<ReferralsRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>jobster.referrals.id_offer</code>.
     */
    public final TableField<ReferralsRecord, Integer> ID_OFFER = createField("id_offer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobster.referrals.email_candidate</code>.
     */
    public final TableField<ReferralsRecord, String> EMAIL_CANDIDATE = createField("email_candidate", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>jobster.referrals.date_creation</code>.
     */
    public final TableField<ReferralsRecord, Timestamp> DATE_CREATION = createField("date_creation", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jobster.referrals.date_accepted</code>.
     */
    public final TableField<ReferralsRecord, Timestamp> DATE_ACCEPTED = createField("date_accepted", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>jobster.referrals</code> table reference
     */
    public Referrals() {
        this(DSL.name("referrals"), null);
    }

    /**
     * Create an aliased <code>jobster.referrals</code> table reference
     */
    public Referrals(String alias) {
        this(DSL.name(alias), REFERRALS);
    }

    /**
     * Create an aliased <code>jobster.referrals</code> table reference
     */
    public Referrals(Name alias) {
        this(alias, REFERRALS);
    }

    private Referrals(Name alias, Table<ReferralsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Referrals(Name alias, Table<ReferralsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Referrals(Table<O> child, ForeignKey<O, ReferralsRecord> key) {
        super(child, key, REFERRALS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobster.JOBSTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REFERRALS_CANDIDATO_IDX, Indexes.REFERRALS_FK_OFFER_IDX, Indexes.REFERRALS_JOBSTER_IDX, Indexes.REFERRALS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ReferralsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REFERRALS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReferralsRecord> getPrimaryKey() {
        return Keys.KEY_REFERRALS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReferralsRecord>> getKeys() {
        return Arrays.<UniqueKey<ReferralsRecord>>asList(Keys.KEY_REFERRALS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ReferralsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReferralsRecord, ?>>asList(Keys.FK_JOBSTER, Keys.FK_CANDIDATO, Keys.FK_OFFER);
    }

    public Users fkJobster() {
        return new Users(this, Keys.FK_JOBSTER);
    }

    public Users fkCandidato() {
        return new Users(this, Keys.FK_CANDIDATO);
    }

    public Offers offers() {
        return new Offers(this, Keys.FK_OFFER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Referrals as(String alias) {
        return new Referrals(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Referrals as(Name alias) {
        return new Referrals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Referrals rename(String name) {
        return new Referrals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Referrals rename(Name name) {
        return new Referrals(name, null);
    }
}
